<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Templates extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        if(!$this->session->userdata('adminId')) redirect('myadmin','refresh');
        $this->load->model('Templates_model');
        $this->load->library('form_validation');
    }

    public function index()
    {
        $templates = $this->Templates_model->get_all();
        

        $data = array(
            'templates_data' => $templates,
            // 'product' => $product
            );

        $data['main']="admin/templates_list";
        $this->load->view('admin/template',$data);

    }

    public function read($id) 
    {
        $row = $this->Templates_model->get_by_id($id);
        if ($row) {
            $this->load->model('Products_model');
            $product = $this->Products_model->get_by_id($row->productId);
            $data = array(
              'templateId' => $row->templateId,
              'templateTitle' => $row->templateTitle,
              'templateDescription' => $row->templateDescription,
              'templateThumbnail' => $row->templateThumbnail,
              'templateImageUrl' => $row->templateImageUrl,
              'templateJson' => $row->templateJson,
              'templatePrice' => $row->templatePrice,
              'templateType' => $row->templateType,
              'templateDate' => $row->templateDate,
              'productId' => $row->productId,
              'product' => $product,
              'adminId' => $row->adminId,
              );
            $data['main']="admin/templates_read";
            $this->load->view('admin/template',$data);
        } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('templates'));
        }
    }

    public function create($new=null) 
    {
        $products = $this->Templates_model->get_all_products(); 
        if($new) $selected_product = $this->Templates_model->get_product_by_id($new); 
        else $selected_product = null;

        $data = array(
            'button' => 'Create',
            'action' => site_url('templates/create_action'),
            'templateId' => set_value('templateId'),
            'templateTitle' => set_value('templateTitle'),
            'templateDescription' => set_value('templateDescription'),
            'templateThumbnail' => set_value('templateThumbnail'),
	    // 'templateImageUrl' => set_value('templateImageUrl'),
            'templateJson' => set_value('templateJson'),
            'templatePrice' => set_value('templatePrice'),
            'templateType' => set_value('templateType'),
            'templateDate' => set_value('templateDate'),
            'productId' => set_value('productId'),
            'products' => $products,
            'new' => $new,
            'selected_product' => $selected_product,
            'adminId' => set_value('adminId'),
            );
        $data['main']="admin/templates_form";
        $this->load->view('admin/template',$data);
    }
    
    private function clean_string($str)
    {
        $str = strtolower(htmlentities($str)); 
        $str = str_replace(get_html_translation_table(), "-", $str);
        $str = str_replace(" ", "-", $str);
        $str = preg_replace("/[-]+/i", "-", $str);
        return $str;
    }

    public function create_action() 
    {
        $this->_rules();

        if ($this->form_validation->run() == FALSE) {
            $this->create();
        } else {


            $this->load->helper('file');
            $data = $this->input->post('templateJson',TRUE);
            $file_name = $this->clean_string($this->input->post('templateTitle',TRUE)).time().'.json';
            if (write_file('./public/uploads/templates/'.$file_name, $data))
            {
               // echo 'File written!';
             $data = array(
                'templateTitle' => $this->input->post('templateTitle',TRUE),
                'templateDescription' => $this->input->post('templateDescription',TRUE),
                'templateThumbnail' => $this->input->post('templateThumbnail',TRUE),
        // 'templateImageUrl' => $this->input->post('templateImageUrl',TRUE),
                'templateJson' => $file_name,
                'templatePrice' => $this->input->post('templatePrice',TRUE),
                'templateType' => $this->input->post('templateType',TRUE),
                'templateDate' => $this->input->post('templateDate',TRUE),
                'productId' => $this->input->post('productId',TRUE),
                'adminId' => $this->input->post('adminId',TRUE),
                );

             $this->Templates_model->insert($data);
             $this->session->set_flashdata('message', 'Create Record Success');
             redirect(site_url('templates'));
         }
         else
         {
               // echo '';
             $this->session->set_flashdata('message', 'Unable to write the file');
             redirect(site_url('templates'));
         }



     }
 }

 public function base64_export($var = null)
 {
    $base64 = '{"objects":[{"type":"image","originX":"center","originY":"center","left":269,"top":190.75,"width":100,"height":100,"fill":"rgb(0,0,0)","stroke":null,"strokeWidth":1,"strokeDashArray":null,"strokeLineCap":"butt","strokeLineJoin":"miter","strokeMiterLimit":10,"scaleX":1.98,"scaleY":1.32,"angle":0,"flipX":false,"flipY":false,"opacity":1,"shadow":null,"visible":true,"clipTo":null,"backgroundColor":"","fillRule":"nonzero","globalCompositeOperation":"source-over","src":[removed]","filters":[],"crossOrigin":"","alignX":"none","alignY":"none","meetOrSlice":"meet"},{"type":"image","originX":"center","originY":"center","left":270,"top":189.25,"width":100,"height":100,"fill":"rgb(0,0,0)","stroke":null,"strokeWidth":1,"strokeDashArray":null,"strokeLineCap":"butt","strokeLineJoin":"miter","strokeMiterLimit":10,"scaleX":1,"scaleY":0.74,"angle":0,"flipX":false,"flipY":false,"opacity":1,"shadow":null,"visible":true,"clipTo":null,"backgroundColor":"","fillRule":"nonzero","globalCompositeOperation":"source-over","src":[removed]","filters":[],"crossOrigin":"","alignX":"none","alignY":"none","meetOrSlice":"meet"},{"type":"text","originX":"left","originY":"top","left":200,"top":259,"width":187.23,"height":62.92,"fill":"#000000","stroke":null,"strokeWidth":1,"strokeDashArray":null,"strokeLineCap":"butt","strokeLineJoin":"miter","strokeMiterLimit":10,"scaleX":0.72,"scaleY":0.58,"angle":0,"flipX":false,"flipY":false,"opacity":1,"shadow":null,"visible":true,"clipTo":null,"backgroundColor":"","fillRule":"nonzero","globalCompositeOperation":"source-over","text":"New Text","fontSize":48,"fontWeight":"normal","fontFamily":"Times New Romans","fontStyle":"","lineHeight":1.16,"textDecoration":"","textAlign":"center","textBackgroundColor":""}],"background":"gray","overlayImage":{"type":"image","originX":"left","originY":"top","left":0,"top":0,"width":530,"height":630,"fill":"rgb(0,0,0)","stroke":null,"strokeWidth":1,"strokeDashArray":null,"strokeLineCap":"butt","strokeLineJoin":"miter","strokeMiterLimit":10,"scaleX":1,"scaleY":1,"angle":0,"flipX":false,"flipY":false,"opacity":1,"shadow":null,"visible":true,"clipTo":null,"backgroundColor":"","fillRule":"nonzero","globalCompositeOperation":"source-over","src":"http://[::1]/beyondphenom/public/uploads/products/front1.png","filters":[],"crossOrigin":"","alignX":"none","alignY":"none","meetOrSlice":"meet"}}';
    $data = explode(',', $base64);
    $img = base64_decode($data[1]);
    
    $this->load->helper('file');
    $file_name = md5(time().uniqid()).".png"; 
    if(write_file('./public/uploads/templates/data/'.$file_name, $img))
        echo "<img src='./public/uploads/templates/data/".$file_name."' />";
    else echo "cannot write";

}

public function update($id) 
{
    $row = $this->Templates_model->get_by_id($id);



    if ($row) {


        $this->load->helper('file');
        $file_name = $row->templateJson;
        $json = read_file('./public/uploads/templates/'.$file_name);

        $data = array(
            'button' => 'Update',
            'action' => site_url('templates/update_action'),
            'templateId' => set_value('templateId', $row->templateId),
            'templateTitle' => set_value('templateTitle', $row->templateTitle),
            'templateDescription' => set_value('templateDescription', $row->templateDescription),
            'templateThumbnail' => set_value('templateThumbnail', $row->templateThumbnail),
            'templateImageUrl' => set_value('templateImageUrl', $row->templateImageUrl),
            'templateJson' => set_value('templateJson', $json),
            'templatePrice' => set_value('templatePrice', $row->templatePrice),
            'templateType' => set_value('templateType', $row->templateType),
            'templateDate' => set_value('templateDate', $row->templateDate),
            'productId' => set_value('productId', $row->productId),
            'new' => $id,
            'selected_product' => $this->Templates_model->get_product_by_id($row->productId),
            'adminId' => set_value('adminId', $row->adminId),
            );
$data['main']="admin/templates_form";
$this->load->view('admin/template',$data);
} else {
    $this->session->set_flashdata('message', 'Record Not Found');
    redirect(site_url('templates'));
}
}

public function update_action() 
{
    $this->_rules();

    if ($this->form_validation->run() == FALSE) {
        $this->update($this->input->post('templateId', TRUE));
    } else {
        $data = array(
          'templateTitle' => $this->input->post('templateTitle',TRUE),
          'templateDescription' => $this->input->post('templateDescription',TRUE),
          'templateThumbnail' => $this->input->post('templateThumbnail',TRUE),
          'templateImageUrl' => $this->input->post('templateImageUrl',TRUE),
          'templateJson' => $this->input->post('templateJson',TRUE),
          'templatePrice' => $this->input->post('templatePrice',TRUE),
          'templateType' => $this->input->post('templateType',TRUE),
          'templateDate' => $this->input->post('templateDate',TRUE),
          'productId' => $this->input->post('productId',TRUE),
          'adminId' => $this->input->post('adminId',TRUE),
          );

        $this->Templates_model->update($this->input->post('templateId', TRUE), $data);
        $this->session->set_flashdata('message', 'Update Record Success');
        redirect(site_url('templates'));
    }
}

public function delete($id) 
{
    $row = $this->Templates_model->get_by_id($id);

    if ($row) {
        $this->Templates_model->delete($id);
        $this->session->set_flashdata('message', 'Delete Record Success');
        redirect(site_url('templates'));
    } else {
        $this->session->set_flashdata('message', 'Record Not Found');
        redirect(site_url('templates'));
    }
}

public function _rules() 
{
	$this->form_validation->set_rules('templateTitle', 'templatetitle', 'trim|required');
	$this->form_validation->set_rules('templateDescription', 'templatedescription', 'trim|required');
	$this->form_validation->set_rules('templateThumbnail', 'templatethumbnail', 'trim|required');
	// $this->form_validation->set_rules('templateImageUrl', 'templateimageurl', 'trim|required');
	// $this->form_validation->set_rules('templateJson', 'templatejson', 'trim|required');
	$this->form_validation->set_rules('templatePrice', 'templateprice', 'trim|required');
	$this->form_validation->set_rules('templateType', 'templatetype', 'trim|required');
	$this->form_validation->set_rules('templateDate', 'templatedate', 'trim|required');
	$this->form_validation->set_rules('productId', 'productid', 'trim|required');
	$this->form_validation->set_rules('adminId', 'adminid', 'trim|required');

	$this->form_validation->set_rules('templateId', 'templateId', 'trim');
	$this->form_validation->set_error_delimiters('<span class="text-danger">', '</span>');
}

public function excel()
{
    $this->load->helper('exportexcel');
    $namaFile = "templates.xls";
    $judul = "templates";
    $tablehead = 0;
    $tablebody = 1;
    $nourut = 1;
        //penulisan header
    header("Pragma: public");
    header("Expires: 0");
    header("Cache-Control: must-revalidate, post-check=0,pre-check=0");
    header("Content-Type: application/force-download");
    header("Content-Type: application/octet-stream");
    header("Content-Type: application/download");
    header("Content-Disposition: attachment;filename=" . $namaFile . "");
    header("Content-Transfer-Encoding: binary ");

    xlsBOF();

    $kolomhead = 0;
    xlsWriteLabel($tablehead, $kolomhead++, "No");
    xlsWriteLabel($tablehead, $kolomhead++, "TemplateTitle");
    xlsWriteLabel($tablehead, $kolomhead++, "TemplateDescription");
    xlsWriteLabel($tablehead, $kolomhead++, "TemplateThumbnail");
    xlsWriteLabel($tablehead, $kolomhead++, "TemplateImageUrl");
    xlsWriteLabel($tablehead, $kolomhead++, "TemplateJson");
    xlsWriteLabel($tablehead, $kolomhead++, "TemplatePrice");
    xlsWriteLabel($tablehead, $kolomhead++, "TemplateType");
    xlsWriteLabel($tablehead, $kolomhead++, "TemplateDate");
    xlsWriteLabel($tablehead, $kolomhead++, "ProductId");
    xlsWriteLabel($tablehead, $kolomhead++, "AdminId");

    foreach ($this->Templates_model->get_all() as $data) {
        $kolombody = 0;

            //ubah xlsWriteLabel menjadi xlsWriteNumber untuk kolom numeric
        xlsWriteNumber($tablebody, $kolombody++, $nourut);
        xlsWriteLabel($tablebody, $kolombody++, $data->templateTitle);
        xlsWriteLabel($tablebody, $kolombody++, $data->templateDescription);
        xlsWriteLabel($tablebody, $kolombody++, $data->templateThumbnail);
        xlsWriteLabel($tablebody, $kolombody++, $data->templateImageUrl);
        xlsWriteLabel($tablebody, $kolombody++, $data->templateJson);
        xlsWriteNumber($tablebody, $kolombody++, $data->templatePrice);
        xlsWriteNumber($tablebody, $kolombody++, $data->templateType);
        xlsWriteLabel($tablebody, $kolombody++, $data->templateDate);
        xlsWriteNumber($tablebody, $kolombody++, $data->productId);
        xlsWriteNumber($tablebody, $kolombody++, $data->adminId);

        $tablebody++;
        $nourut++;
    }

    xlsEOF();
    exit();
}

public function word()
{
    header("Content-type: application/vnd.ms-word");
    header("Content-Disposition: attachment;Filename=templates.doc");

    $data = array(
        'templates_data' => $this->Templates_model->get_all(),
        'start' => 0
        );

    $this->load->view('admin/templates_doc',$data);
}

}

/* End of file Templates.php */
/* Location: ./application/controllers/Templates.php */
/* Please DO NOT modify this information : */
/* Generated by Harviacode Codeigniter CRUD Generator 2016-05-17 12:26:02 */
/* http://harviacode.com */